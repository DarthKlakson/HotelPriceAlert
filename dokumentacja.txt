 Hotel Price App — Dokumentacja techniczna
1. Opis projektu

Hotel Price App to aplikacja monitorująca ceny ofert wakacyjnych z portalu Itaka.pl.
Umożliwia użytkownikowi:

    rejestrację i logowanie (JWT),

    zapisywanie oraz usuwanie hoteli po linku,

    automatyczne pobieranie aktualnej ceny i nazwy hotelu,

    cykliczne (co godzinę) sprawdzanie zmian cen i wysyłanie powiadomień e-mail o pierwszym odczycie, spadku lub wzroście ceny.

Technologie:

    Backend: Spring Boot 3, Spring Security (JWT), Spring Data JPA (MySQL), Selenium (Chromium/ChromeDriver), Java Mail Sender.

    Frontend: React + Bootstrap.

    Baza danych: MySQL.

2. Architektura systemu

Frontend (React)

    Obsługuje rejestrację/logowanie.

    Wyświetla listę hoteli użytkownika.

    Pozwala dodać nowy hotel (po URL) i usunąć istniejący.

    Korzysta z Axios z interceptorem JWT.

Backend (Spring Boot)

    Kontrolery:

        AuthController – rejestracja/logowanie,

        HotelController – zarządzanie hotelami,

        UserController – informacje o użytkowniku,

        EmailTestController – test wysyłki e-mail.

    Serwisy:

        UserService – logika użytkowników,

        HotelService – logika hoteli,

        ScraperService / ItakaPriceScraper – pobieranie danych z Itaka.pl,

        EmailService – wysyłka powiadomień.

    Bezpieczeństwo:

        SecurityConfig, JwtAuthenticationFilter, CustomUserDetailsService, JwtUtil.

3. Model danych

Relacje:

    User (1) — (N) Hotel

    Hotel (1) — (N) PriceHistory

Pola kluczowe:

    User: username (unikatowy), password (BCrypt), email, role.

    Hotel: url (TEXT), name, lastKnownPrice (String), FK user_id.

    PriceHistory: price (String), timestamp, FK hotel_id.

4. Bezpieczeństwo (JWT)

    Logowanie zwraca czysty string z tokenem JWT.

    JwtAuthenticationFilter weryfikuje token i ustawia użytkownika w kontekście.

    SecurityConfig (bezstanowy, CORS, CSRF off) pozwala na:

        /api/auth/**

        /api/test/**

        /v3/api-docs/**, /swagger-ui/**, /swagger-ui.html

    Reszta endpointów wymaga autoryzacji.

5. Moduł scrapera

    ItakaPriceScraper używa Selenium (headless Chromium/ChromeDriver).

    Jedna metoda pobiera nazwę i cenę w sposób atomowy (ReentrantLock).

    Selekcory:

        nazwa hotelu: h1.mb-0.oui-lh-34

        cena: div[data-testid='current-price'] span[data-price-catalog-code]

    Cena konwertowana na liczby (BigDecimal).

6. Zadania cykliczne

    Włączone przez @EnableScheduling.

    @Scheduled(fixedRate = 3600000) — co 1 godzinę:

        Pobiera wszystkie hotele.

        Scrapuje nazwę i cenę.

        Jeśli nazwa się zmieniła → aktualizacja.

        Jeśli to pierwszy odczyt → zapis do PriceHistory i wysyłka e-mail.

        Jeśli cena spadła → aktualizacja, zapis historii, e-mail „spadek ceny”.

        Jeśli cena wzrosła → aktualizacja, e-mail „wzrost ceny”.

7. API — kontrakt
Autoryzacja

POST /api/auth/register
Body:

{
  "username": "jan",
  "password": "Haslo123!",
  "email": "jan@example.com"
}

Odpowiedź: "Zarejestrowano pomyślnie"

POST /api/auth/login
Body:

{
  "username": "jan",
  "password": "Haslo123!"
}

Odpowiedź: eyJhbGciOiJIUzI1NiIsInR... (token JWT)
Użytkownik

GET /api/users/me
→ Zwraca dane bieżącego użytkownika.
Hotele

GET /api/hotels
→ Lista hoteli użytkownika:

[
  {
    "id": 1,
    "url": "https://www.itaka.pl/wakacje/...",
    "name": "Hotel X",
    "lastKnownPrice": "6399"
  }
]

POST /api/hotels
Body:

{
  "url": "https://www.itaka.pl/wakacje/..."
}

→ Dodaje hotel, scrapuje pierwszą cenę.

DELETE /api/hotels/{id}
→ Usuwa hotel użytkownika.
8. Frontend

    api.js — konfiguruje Axios z tokenem JWT.

    Hotels.js — wyświetla karty hoteli:

        przycisk "Zobacz na Itace"

        przycisk "Usuń"

    Formularz do dodania nowego hotelu.

9. Uruchomienie projektu
Backend

cd backend
mvn clean install
mvn spring-boot:run

Swagger UI: http://localhost:8080/swagger-ui/index.html
Frontend

cd frontend/hotel-price-frontend
npm install
npm start

Aplikacja: http://localhost:3000
10. Rozwiązywanie problemów

    "Failed to load remote configuration" w Swaggerze
    → Upewnij się, że w SecurityConfig masz:

.requestMatchers("/v3/api-docs/**", "/swagger-ui/**", "/swagger-ui.html").permitAll()

Token undefined w localStorage
→ Sprawdź w Login.js, czy backend zwraca czysty string, a nie obiekt JSON.

Brak Chromedriver
→ Zainstaluj chromium i chromium-driver.